# coding: utf-8

"""
    REMESITA API REST

    Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendrás un token de acceso que debes usar en el resto de peticiones  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OperationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def rest_v1_operation_orders_get(self, **kwargs):  # noqa: E501
        """Obtiene una lista de órdenes  # noqa: E501

        Recupera una lista paginada de órdenes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_v1_operation_orders_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pg: Número de página
        :param int pg_size: Cantidad de elementos por página
        :param datetime start: Fecha de inicio en formato Y-m-d H:i:s
        :param datetime end: Fecha de finalización en formato Y-m-d H:i:s
        :param str status: Estado para filtrar
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_v1_operation_orders_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_v1_operation_orders_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_v1_operation_orders_get_with_http_info(self, **kwargs):  # noqa: E501
        """Obtiene una lista de órdenes  # noqa: E501

        Recupera una lista paginada de órdenes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_v1_operation_orders_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pg: Número de página
        :param int pg_size: Cantidad de elementos por página
        :param datetime start: Fecha de inicio en formato Y-m-d H:i:s
        :param datetime end: Fecha de finalización en formato Y-m-d H:i:s
        :param str status: Estado para filtrar
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pg', 'pg_size', 'start', 'end', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_v1_operation_orders_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pg' in params:
            query_params.append(('pg', params['pg']))  # noqa: E501
        if 'pg_size' in params:
            query_params.append(('pgSize', params['pg_size']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/operation/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_v1_operation_p2p_get(self, **kwargs):  # noqa: E501
        """Obtiene una lista de operaciones P2P  # noqa: E501

        Recupera una lista paginada de operaciones P2P  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_v1_operation_p2p_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pg: Número de página
        :param int pg_size: Cantidad de elementos por página
        :param datetime start: Fecha de inicio en formato Y-m-d H:i:s
        :param datetime end: Fecha de finalización en formato Y-m-d H:i:s
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rest_v1_operation_p2p_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_v1_operation_p2p_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_v1_operation_p2p_get_with_http_info(self, **kwargs):  # noqa: E501
        """Obtiene una lista de operaciones P2P  # noqa: E501

        Recupera una lista paginada de operaciones P2P  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_v1_operation_p2p_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pg: Número de página
        :param int pg_size: Cantidad de elementos por página
        :param datetime start: Fecha de inicio en formato Y-m-d H:i:s
        :param datetime end: Fecha de finalización en formato Y-m-d H:i:s
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pg', 'pg_size', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_v1_operation_p2p_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pg' in params:
            query_params.append(('pg', params['pg']))  # noqa: E501
        if 'pg_size' in params:
            query_params.append(('pgSize', params['pg_size']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/operation/p2p', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
