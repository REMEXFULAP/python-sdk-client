# coding: utf-8

"""
    REMESITA API REST

    Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendr√°s un token de acceso que debes usar en el resto de peticiones  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InlineResponse2008User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uid': 'str',
        'name': 'str',
        'phone': 'str',
        'email': 'str',
        'picture_url': 'str',
        'main_card': 'str',
        'level': 'str',
        'country_iso': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'name': 'name',
        'phone': 'phone',
        'email': 'email',
        'picture_url': 'pictureUrl',
        'main_card': 'mainCard',
        'level': 'level',
        'country_iso': 'countryISO'
    }

    def __init__(self, uid=None, name=None, phone=None, email=None, picture_url=None, main_card=None, level=None, country_iso=None, _configuration=None):  # noqa: E501
        """InlineResponse2008User - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uid = None
        self._name = None
        self._phone = None
        self._email = None
        self._picture_url = None
        self._main_card = None
        self._level = None
        self._country_iso = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if name is not None:
            self.name = name
        if phone is not None:
            self.phone = phone
        if email is not None:
            self.email = email
        if picture_url is not None:
            self.picture_url = picture_url
        if main_card is not None:
            self.main_card = main_card
        if level is not None:
            self.level = level
        if country_iso is not None:
            self.country_iso = country_iso

    @property
    def uid(self):
        """Gets the uid of this InlineResponse2008User.  # noqa: E501


        :return: The uid of this InlineResponse2008User.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this InlineResponse2008User.


        :param uid: The uid of this InlineResponse2008User.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this InlineResponse2008User.  # noqa: E501


        :return: The name of this InlineResponse2008User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2008User.


        :param name: The name of this InlineResponse2008User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this InlineResponse2008User.  # noqa: E501


        :return: The phone of this InlineResponse2008User.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this InlineResponse2008User.


        :param phone: The phone of this InlineResponse2008User.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def email(self):
        """Gets the email of this InlineResponse2008User.  # noqa: E501


        :return: The email of this InlineResponse2008User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse2008User.


        :param email: The email of this InlineResponse2008User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def picture_url(self):
        """Gets the picture_url of this InlineResponse2008User.  # noqa: E501


        :return: The picture_url of this InlineResponse2008User.  # noqa: E501
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this InlineResponse2008User.


        :param picture_url: The picture_url of this InlineResponse2008User.  # noqa: E501
        :type: str
        """

        self._picture_url = picture_url

    @property
    def main_card(self):
        """Gets the main_card of this InlineResponse2008User.  # noqa: E501


        :return: The main_card of this InlineResponse2008User.  # noqa: E501
        :rtype: str
        """
        return self._main_card

    @main_card.setter
    def main_card(self, main_card):
        """Sets the main_card of this InlineResponse2008User.


        :param main_card: The main_card of this InlineResponse2008User.  # noqa: E501
        :type: str
        """

        self._main_card = main_card

    @property
    def level(self):
        """Gets the level of this InlineResponse2008User.  # noqa: E501


        :return: The level of this InlineResponse2008User.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this InlineResponse2008User.


        :param level: The level of this InlineResponse2008User.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def country_iso(self):
        """Gets the country_iso of this InlineResponse2008User.  # noqa: E501


        :return: The country_iso of this InlineResponse2008User.  # noqa: E501
        :rtype: str
        """
        return self._country_iso

    @country_iso.setter
    def country_iso(self, country_iso):
        """Sets the country_iso of this InlineResponse2008User.


        :param country_iso: The country_iso of this InlineResponse2008User.  # noqa: E501
        :type: str
        """

        self._country_iso = country_iso

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2008User):
            return True

        return self.to_dict() != other.to_dict()
