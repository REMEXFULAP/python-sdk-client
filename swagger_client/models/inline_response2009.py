# coding: utf-8

"""
    REMESITA API REST

    Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendrás un token de acceso que debes usar en el resto de peticiones  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InlineResponse2009(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prepaid_card_combined_balance': 'float',
        'prepaid_card_combined_balance_usd': 'float',
        'referrals_commission': 'float',
        'usd2mxn': 'float'
    }

    attribute_map = {
        'prepaid_card_combined_balance': 'prepaidCardCombinedBalance',
        'prepaid_card_combined_balance_usd': 'prepaidCardCombinedBalanceUsd',
        'referrals_commission': 'referralsCommission',
        'usd2mxn': 'usd2mxn'
    }

    def __init__(self, prepaid_card_combined_balance=None, prepaid_card_combined_balance_usd=None, referrals_commission=None, usd2mxn=None, _configuration=None):  # noqa: E501
        """InlineResponse2009 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._prepaid_card_combined_balance = None
        self._prepaid_card_combined_balance_usd = None
        self._referrals_commission = None
        self._usd2mxn = None
        self.discriminator = None

        if prepaid_card_combined_balance is not None:
            self.prepaid_card_combined_balance = prepaid_card_combined_balance
        if prepaid_card_combined_balance_usd is not None:
            self.prepaid_card_combined_balance_usd = prepaid_card_combined_balance_usd
        if referrals_commission is not None:
            self.referrals_commission = referrals_commission
        if usd2mxn is not None:
            self.usd2mxn = usd2mxn

    @property
    def prepaid_card_combined_balance(self):
        """Gets the prepaid_card_combined_balance of this InlineResponse2009.  # noqa: E501

        Balance combinado de la tarjeta prepago  # noqa: E501

        :return: The prepaid_card_combined_balance of this InlineResponse2009.  # noqa: E501
        :rtype: float
        """
        return self._prepaid_card_combined_balance

    @prepaid_card_combined_balance.setter
    def prepaid_card_combined_balance(self, prepaid_card_combined_balance):
        """Sets the prepaid_card_combined_balance of this InlineResponse2009.

        Balance combinado de la tarjeta prepago  # noqa: E501

        :param prepaid_card_combined_balance: The prepaid_card_combined_balance of this InlineResponse2009.  # noqa: E501
        :type: float
        """

        self._prepaid_card_combined_balance = prepaid_card_combined_balance

    @property
    def prepaid_card_combined_balance_usd(self):
        """Gets the prepaid_card_combined_balance_usd of this InlineResponse2009.  # noqa: E501

        Balance combinado de la tarjeta prepago en USD  # noqa: E501

        :return: The prepaid_card_combined_balance_usd of this InlineResponse2009.  # noqa: E501
        :rtype: float
        """
        return self._prepaid_card_combined_balance_usd

    @prepaid_card_combined_balance_usd.setter
    def prepaid_card_combined_balance_usd(self, prepaid_card_combined_balance_usd):
        """Sets the prepaid_card_combined_balance_usd of this InlineResponse2009.

        Balance combinado de la tarjeta prepago en USD  # noqa: E501

        :param prepaid_card_combined_balance_usd: The prepaid_card_combined_balance_usd of this InlineResponse2009.  # noqa: E501
        :type: float
        """

        self._prepaid_card_combined_balance_usd = prepaid_card_combined_balance_usd

    @property
    def referrals_commission(self):
        """Gets the referrals_commission of this InlineResponse2009.  # noqa: E501

        Comisión de referidos  # noqa: E501

        :return: The referrals_commission of this InlineResponse2009.  # noqa: E501
        :rtype: float
        """
        return self._referrals_commission

    @referrals_commission.setter
    def referrals_commission(self, referrals_commission):
        """Sets the referrals_commission of this InlineResponse2009.

        Comisión de referidos  # noqa: E501

        :param referrals_commission: The referrals_commission of this InlineResponse2009.  # noqa: E501
        :type: float
        """

        self._referrals_commission = referrals_commission

    @property
    def usd2mxn(self):
        """Gets the usd2mxn of this InlineResponse2009.  # noqa: E501

        Tasa de cambio de USD a MXN  # noqa: E501

        :return: The usd2mxn of this InlineResponse2009.  # noqa: E501
        :rtype: float
        """
        return self._usd2mxn

    @usd2mxn.setter
    def usd2mxn(self, usd2mxn):
        """Sets the usd2mxn of this InlineResponse2009.

        Tasa de cambio de USD a MXN  # noqa: E501

        :param usd2mxn: The usd2mxn of this InlineResponse2009.  # noqa: E501
        :type: float
        """

        self._usd2mxn = usd2mxn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2009):
            return True

        return self.to_dict() != other.to_dict()
