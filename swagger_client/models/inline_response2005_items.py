# coding: utf-8

"""
    REMESITA API REST

    Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendr√°s un token de acceso que debes usar en el resto de peticiones  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InlineResponse2005Items(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'speed_mode': 'str',
        'reference': 'str',
        'sku': 'str',
        'recipient_account': 'str',
        'swift': 'str',
        'institution': 'str',
        'sender_name': 'str',
        'sender_country': 'str',
        'recipient_name': 'str',
        'recipient_country': 'str',
        'recipient_relationship': 'str',
        'payment_method': 'str',
        'quotation': 'str',
        'sender_currency': 'str',
        'exchange_rate': 'float',
        'life_time': 'str',
        'created_at': 'datetime',
        'payed_at': 'datetime',
        'cancel_at': 'datetime',
        'completed_at': 'datetime',
        'institution_icon': 'str',
        'cancel_reason': 'str',
        'intent': 'str'
    }

    attribute_map = {
        'status': 'status',
        'speed_mode': 'speedMode',
        'reference': 'reference',
        'sku': 'sku',
        'recipient_account': 'recipientAccount',
        'swift': 'swift',
        'institution': 'institution',
        'sender_name': 'senderName',
        'sender_country': 'senderCountry',
        'recipient_name': 'recipientName',
        'recipient_country': 'recipientCountry',
        'recipient_relationship': 'recipientRelationship',
        'payment_method': 'paymentMethod',
        'quotation': 'quotation',
        'sender_currency': 'senderCurrency',
        'exchange_rate': 'exchangeRate',
        'life_time': 'lifeTime',
        'created_at': 'createdAt',
        'payed_at': 'payedAt',
        'cancel_at': 'cancelAt',
        'completed_at': 'completedAt',
        'institution_icon': 'institutionIcon',
        'cancel_reason': 'cancelReason',
        'intent': 'intent'
    }

    def __init__(self, status=None, speed_mode=None, reference=None, sku=None, recipient_account=None, swift=None, institution=None, sender_name=None, sender_country=None, recipient_name=None, recipient_country=None, recipient_relationship=None, payment_method=None, quotation=None, sender_currency=None, exchange_rate=None, life_time=None, created_at=None, payed_at=None, cancel_at=None, completed_at=None, institution_icon=None, cancel_reason=None, intent=None, _configuration=None):  # noqa: E501
        """InlineResponse2005Items - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._speed_mode = None
        self._reference = None
        self._sku = None
        self._recipient_account = None
        self._swift = None
        self._institution = None
        self._sender_name = None
        self._sender_country = None
        self._recipient_name = None
        self._recipient_country = None
        self._recipient_relationship = None
        self._payment_method = None
        self._quotation = None
        self._sender_currency = None
        self._exchange_rate = None
        self._life_time = None
        self._created_at = None
        self._payed_at = None
        self._cancel_at = None
        self._completed_at = None
        self._institution_icon = None
        self._cancel_reason = None
        self._intent = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if speed_mode is not None:
            self.speed_mode = speed_mode
        if reference is not None:
            self.reference = reference
        if sku is not None:
            self.sku = sku
        if recipient_account is not None:
            self.recipient_account = recipient_account
        if swift is not None:
            self.swift = swift
        if institution is not None:
            self.institution = institution
        if sender_name is not None:
            self.sender_name = sender_name
        if sender_country is not None:
            self.sender_country = sender_country
        if recipient_name is not None:
            self.recipient_name = recipient_name
        if recipient_country is not None:
            self.recipient_country = recipient_country
        if recipient_relationship is not None:
            self.recipient_relationship = recipient_relationship
        if payment_method is not None:
            self.payment_method = payment_method
        if quotation is not None:
            self.quotation = quotation
        if sender_currency is not None:
            self.sender_currency = sender_currency
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if life_time is not None:
            self.life_time = life_time
        if created_at is not None:
            self.created_at = created_at
        if payed_at is not None:
            self.payed_at = payed_at
        if cancel_at is not None:
            self.cancel_at = cancel_at
        if completed_at is not None:
            self.completed_at = completed_at
        if institution_icon is not None:
            self.institution_icon = institution_icon
        if cancel_reason is not None:
            self.cancel_reason = cancel_reason
        if intent is not None:
            self.intent = intent

    @property
    def status(self):
        """Gets the status of this InlineResponse2005Items.  # noqa: E501


        :return: The status of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2005Items.


        :param status: The status of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def speed_mode(self):
        """Gets the speed_mode of this InlineResponse2005Items.  # noqa: E501


        :return: The speed_mode of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._speed_mode

    @speed_mode.setter
    def speed_mode(self, speed_mode):
        """Sets the speed_mode of this InlineResponse2005Items.


        :param speed_mode: The speed_mode of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._speed_mode = speed_mode

    @property
    def reference(self):
        """Gets the reference of this InlineResponse2005Items.  # noqa: E501


        :return: The reference of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this InlineResponse2005Items.


        :param reference: The reference of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def sku(self):
        """Gets the sku of this InlineResponse2005Items.  # noqa: E501


        :return: The sku of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this InlineResponse2005Items.


        :param sku: The sku of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def recipient_account(self):
        """Gets the recipient_account of this InlineResponse2005Items.  # noqa: E501


        :return: The recipient_account of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._recipient_account

    @recipient_account.setter
    def recipient_account(self, recipient_account):
        """Sets the recipient_account of this InlineResponse2005Items.


        :param recipient_account: The recipient_account of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._recipient_account = recipient_account

    @property
    def swift(self):
        """Gets the swift of this InlineResponse2005Items.  # noqa: E501


        :return: The swift of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._swift

    @swift.setter
    def swift(self, swift):
        """Sets the swift of this InlineResponse2005Items.


        :param swift: The swift of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._swift = swift

    @property
    def institution(self):
        """Gets the institution of this InlineResponse2005Items.  # noqa: E501


        :return: The institution of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this InlineResponse2005Items.


        :param institution: The institution of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._institution = institution

    @property
    def sender_name(self):
        """Gets the sender_name of this InlineResponse2005Items.  # noqa: E501


        :return: The sender_name of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name):
        """Sets the sender_name of this InlineResponse2005Items.


        :param sender_name: The sender_name of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._sender_name = sender_name

    @property
    def sender_country(self):
        """Gets the sender_country of this InlineResponse2005Items.  # noqa: E501


        :return: The sender_country of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._sender_country

    @sender_country.setter
    def sender_country(self, sender_country):
        """Sets the sender_country of this InlineResponse2005Items.


        :param sender_country: The sender_country of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._sender_country = sender_country

    @property
    def recipient_name(self):
        """Gets the recipient_name of this InlineResponse2005Items.  # noqa: E501


        :return: The recipient_name of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this InlineResponse2005Items.


        :param recipient_name: The recipient_name of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._recipient_name = recipient_name

    @property
    def recipient_country(self):
        """Gets the recipient_country of this InlineResponse2005Items.  # noqa: E501


        :return: The recipient_country of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._recipient_country

    @recipient_country.setter
    def recipient_country(self, recipient_country):
        """Sets the recipient_country of this InlineResponse2005Items.


        :param recipient_country: The recipient_country of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._recipient_country = recipient_country

    @property
    def recipient_relationship(self):
        """Gets the recipient_relationship of this InlineResponse2005Items.  # noqa: E501


        :return: The recipient_relationship of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._recipient_relationship

    @recipient_relationship.setter
    def recipient_relationship(self, recipient_relationship):
        """Sets the recipient_relationship of this InlineResponse2005Items.


        :param recipient_relationship: The recipient_relationship of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._recipient_relationship = recipient_relationship

    @property
    def payment_method(self):
        """Gets the payment_method of this InlineResponse2005Items.  # noqa: E501


        :return: The payment_method of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this InlineResponse2005Items.


        :param payment_method: The payment_method of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def quotation(self):
        """Gets the quotation of this InlineResponse2005Items.  # noqa: E501


        :return: The quotation of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._quotation

    @quotation.setter
    def quotation(self, quotation):
        """Sets the quotation of this InlineResponse2005Items.


        :param quotation: The quotation of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._quotation = quotation

    @property
    def sender_currency(self):
        """Gets the sender_currency of this InlineResponse2005Items.  # noqa: E501


        :return: The sender_currency of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._sender_currency

    @sender_currency.setter
    def sender_currency(self, sender_currency):
        """Sets the sender_currency of this InlineResponse2005Items.


        :param sender_currency: The sender_currency of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._sender_currency = sender_currency

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this InlineResponse2005Items.  # noqa: E501


        :return: The exchange_rate of this InlineResponse2005Items.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this InlineResponse2005Items.


        :param exchange_rate: The exchange_rate of this InlineResponse2005Items.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def life_time(self):
        """Gets the life_time of this InlineResponse2005Items.  # noqa: E501


        :return: The life_time of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._life_time

    @life_time.setter
    def life_time(self, life_time):
        """Sets the life_time of this InlineResponse2005Items.


        :param life_time: The life_time of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._life_time = life_time

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse2005Items.  # noqa: E501


        :return: The created_at of this InlineResponse2005Items.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse2005Items.


        :param created_at: The created_at of this InlineResponse2005Items.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def payed_at(self):
        """Gets the payed_at of this InlineResponse2005Items.  # noqa: E501


        :return: The payed_at of this InlineResponse2005Items.  # noqa: E501
        :rtype: datetime
        """
        return self._payed_at

    @payed_at.setter
    def payed_at(self, payed_at):
        """Sets the payed_at of this InlineResponse2005Items.


        :param payed_at: The payed_at of this InlineResponse2005Items.  # noqa: E501
        :type: datetime
        """

        self._payed_at = payed_at

    @property
    def cancel_at(self):
        """Gets the cancel_at of this InlineResponse2005Items.  # noqa: E501


        :return: The cancel_at of this InlineResponse2005Items.  # noqa: E501
        :rtype: datetime
        """
        return self._cancel_at

    @cancel_at.setter
    def cancel_at(self, cancel_at):
        """Sets the cancel_at of this InlineResponse2005Items.


        :param cancel_at: The cancel_at of this InlineResponse2005Items.  # noqa: E501
        :type: datetime
        """

        self._cancel_at = cancel_at

    @property
    def completed_at(self):
        """Gets the completed_at of this InlineResponse2005Items.  # noqa: E501


        :return: The completed_at of this InlineResponse2005Items.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this InlineResponse2005Items.


        :param completed_at: The completed_at of this InlineResponse2005Items.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def institution_icon(self):
        """Gets the institution_icon of this InlineResponse2005Items.  # noqa: E501


        :return: The institution_icon of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._institution_icon

    @institution_icon.setter
    def institution_icon(self, institution_icon):
        """Sets the institution_icon of this InlineResponse2005Items.


        :param institution_icon: The institution_icon of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._institution_icon = institution_icon

    @property
    def cancel_reason(self):
        """Gets the cancel_reason of this InlineResponse2005Items.  # noqa: E501


        :return: The cancel_reason of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._cancel_reason

    @cancel_reason.setter
    def cancel_reason(self, cancel_reason):
        """Sets the cancel_reason of this InlineResponse2005Items.


        :param cancel_reason: The cancel_reason of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._cancel_reason = cancel_reason

    @property
    def intent(self):
        """Gets the intent of this InlineResponse2005Items.  # noqa: E501


        :return: The intent of this InlineResponse2005Items.  # noqa: E501
        :rtype: str
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this InlineResponse2005Items.


        :param intent: The intent of this InlineResponse2005Items.  # noqa: E501
        :type: str
        """

        self._intent = intent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005Items, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005Items):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2005Items):
            return True

        return self.to_dict() != other.to_dict()
