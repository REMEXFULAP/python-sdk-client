# coding: utf-8

"""
    REMESITA API REST

    Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendrás un token de acceso que debes usar en el resto de peticiones  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Body1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_unit_id': 'str',
        'amount': 'float',
        'concept': 'str',
        'ipn_url': 'str',
        'success_url': 'str',
        'cancel_url': 'str',
        'custom_id': 'str',
        'payer_name': 'str',
        'payer_phone': 'str',
        'payer_email': 'str'
    }

    attribute_map = {
        'business_unit_id': 'businessUnitId',
        'amount': 'amount',
        'concept': 'concept',
        'ipn_url': 'ipnUrl',
        'success_url': 'successUrl',
        'cancel_url': 'cancelUrl',
        'custom_id': 'customId',
        'payer_name': 'payerName',
        'payer_phone': 'payerPhone',
        'payer_email': 'payerEmail'
    }

    def __init__(self, business_unit_id=None, amount=None, concept=None, ipn_url=None, success_url=None, cancel_url=None, custom_id=None, payer_name=None, payer_phone=None, payer_email=None, _configuration=None):  # noqa: E501
        """Body1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._business_unit_id = None
        self._amount = None
        self._concept = None
        self._ipn_url = None
        self._success_url = None
        self._cancel_url = None
        self._custom_id = None
        self._payer_name = None
        self._payer_phone = None
        self._payer_email = None
        self.discriminator = None

        self.business_unit_id = business_unit_id
        self.amount = amount
        self.concept = concept
        if ipn_url is not None:
            self.ipn_url = ipn_url
        if success_url is not None:
            self.success_url = success_url
        if cancel_url is not None:
            self.cancel_url = cancel_url
        if custom_id is not None:
            self.custom_id = custom_id
        if payer_name is not None:
            self.payer_name = payer_name
        if payer_phone is not None:
            self.payer_phone = payer_phone
        if payer_email is not None:
            self.payer_email = payer_email

    @property
    def business_unit_id(self):
        """Gets the business_unit_id of this Body1.  # noqa: E501

        ID del negocio que está generando el link de pago  # noqa: E501

        :return: The business_unit_id of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._business_unit_id

    @business_unit_id.setter
    def business_unit_id(self, business_unit_id):
        """Sets the business_unit_id of this Body1.

        ID del negocio que está generando el link de pago  # noqa: E501

        :param business_unit_id: The business_unit_id of this Body1.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and business_unit_id is None:
            raise ValueError("Invalid value for `business_unit_id`, must not be `None`")  # noqa: E501

        self._business_unit_id = business_unit_id

    @property
    def amount(self):
        """Gets the amount of this Body1.  # noqa: E501

        Monto a pagar  # noqa: E501

        :return: The amount of this Body1.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Body1.

        Monto a pagar  # noqa: E501

        :param amount: The amount of this Body1.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def concept(self):
        """Gets the concept of this Body1.  # noqa: E501

        Concepto de pago o comentario  # noqa: E501

        :return: The concept of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._concept

    @concept.setter
    def concept(self, concept):
        """Sets the concept of this Body1.

        Concepto de pago o comentario  # noqa: E501

        :param concept: The concept of this Body1.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and concept is None:
            raise ValueError("Invalid value for `concept`, must not be `None`")  # noqa: E501

        self._concept = concept

    @property
    def ipn_url(self):
        """Gets the ipn_url of this Body1.  # noqa: E501

        Dirección para recibir webhooks de notificaciones de pago en segundo plano  # noqa: E501

        :return: The ipn_url of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._ipn_url

    @ipn_url.setter
    def ipn_url(self, ipn_url):
        """Sets the ipn_url of this Body1.

        Dirección para recibir webhooks de notificaciones de pago en segundo plano  # noqa: E501

        :param ipn_url: The ipn_url of this Body1.  # noqa: E501
        :type: str
        """

        self._ipn_url = ipn_url

    @property
    def success_url(self):
        """Gets the success_url of this Body1.  # noqa: E501

        URL a donde redireccionar si el pago es satisfactorio  # noqa: E501

        :return: The success_url of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._success_url

    @success_url.setter
    def success_url(self, success_url):
        """Sets the success_url of this Body1.

        URL a donde redireccionar si el pago es satisfactorio  # noqa: E501

        :param success_url: The success_url of this Body1.  # noqa: E501
        :type: str
        """

        self._success_url = success_url

    @property
    def cancel_url(self):
        """Gets the cancel_url of this Body1.  # noqa: E501

        URL a donde redireccionar si el pago es cancelado  # noqa: E501

        :return: The cancel_url of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this Body1.

        URL a donde redireccionar si el pago es cancelado  # noqa: E501

        :param cancel_url: The cancel_url of this Body1.  # noqa: E501
        :type: str
        """

        self._cancel_url = cancel_url

    @property
    def custom_id(self):
        """Gets the custom_id of this Body1.  # noqa: E501

        Identificador externo para trazabilidad  # noqa: E501

        :return: The custom_id of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._custom_id

    @custom_id.setter
    def custom_id(self, custom_id):
        """Sets the custom_id of this Body1.

        Identificador externo para trazabilidad  # noqa: E501

        :param custom_id: The custom_id of this Body1.  # noqa: E501
        :type: str
        """

        self._custom_id = custom_id

    @property
    def payer_name(self):
        """Gets the payer_name of this Body1.  # noqa: E501

        Nombre del pagador (si se conoce)  # noqa: E501

        :return: The payer_name of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._payer_name

    @payer_name.setter
    def payer_name(self, payer_name):
        """Sets the payer_name of this Body1.

        Nombre del pagador (si se conoce)  # noqa: E501

        :param payer_name: The payer_name of this Body1.  # noqa: E501
        :type: str
        """

        self._payer_name = payer_name

    @property
    def payer_phone(self):
        """Gets the payer_phone of this Body1.  # noqa: E501

        Teléfono del pagador (si se conoce)  # noqa: E501

        :return: The payer_phone of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._payer_phone

    @payer_phone.setter
    def payer_phone(self, payer_phone):
        """Sets the payer_phone of this Body1.

        Teléfono del pagador (si se conoce)  # noqa: E501

        :param payer_phone: The payer_phone of this Body1.  # noqa: E501
        :type: str
        """

        self._payer_phone = payer_phone

    @property
    def payer_email(self):
        """Gets the payer_email of this Body1.  # noqa: E501

        Email del pagador (si se conoce)  # noqa: E501

        :return: The payer_email of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._payer_email

    @payer_email.setter
    def payer_email(self, payer_email):
        """Sets the payer_email of this Body1.

        Email del pagador (si se conoce)  # noqa: E501

        :param payer_email: The payer_email of this Body1.  # noqa: E501
        :type: str
        """

        self._payer_email = payer_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body1):
            return True

        return self.to_dict() != other.to_dict()
